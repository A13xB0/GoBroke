// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: proto/redis.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// RedisMessage represents a message that will be serialized and sent through Redis.
type RedisMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	InstanceId    string                 `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`                                                     // Source instance ID to prevent message loops
	MessageUuid   string                 `protobuf:"bytes,2,opt,name=message_uuid,json=messageUuid,proto3" json:"message_uuid,omitempty"`                                                  // Original message UUID
	ToClientIds   []string               `protobuf:"bytes,3,rep,name=to_client_ids,json=toClientIds,proto3" json:"to_client_ids,omitempty"`                                                // Target client UUIDs
	ToLogic       []string               `protobuf:"bytes,4,rep,name=to_logic,json=toLogic,proto3" json:"to_logic,omitempty"`                                                              // Target logic names
	FromClientId  string                 `protobuf:"bytes,5,opt,name=from_client_id,json=fromClientId,proto3" json:"from_client_id,omitempty"`                                             // Source client UUID, if applicable
	FromLogic     string                 `protobuf:"bytes,6,opt,name=from_logic,json=fromLogic,proto3" json:"from_logic,omitempty"`                                                        // Source logic name, if applicable
	MessageRaw    []byte                 `protobuf:"bytes,7,opt,name=message_raw,json=messageRaw,proto3" json:"message_raw,omitempty"`                                                     // Raw message payload
	Metadata      map[string][]byte      `protobuf:"bytes,8,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // Message metadata
	Tags          map[string][]byte      `protobuf:"bytes,9,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`         // Message tags
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RedisMessage) Reset() {
	*x = RedisMessage{}
	mi := &file_proto_redis_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RedisMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedisMessage) ProtoMessage() {}

func (x *RedisMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_redis_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedisMessage.ProtoReflect.Descriptor instead.
func (*RedisMessage) Descriptor() ([]byte, []int) {
	return file_proto_redis_proto_rawDescGZIP(), []int{0}
}

func (x *RedisMessage) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *RedisMessage) GetMessageUuid() string {
	if x != nil {
		return x.MessageUuid
	}
	return ""
}

func (x *RedisMessage) GetToClientIds() []string {
	if x != nil {
		return x.ToClientIds
	}
	return nil
}

func (x *RedisMessage) GetToLogic() []string {
	if x != nil {
		return x.ToLogic
	}
	return nil
}

func (x *RedisMessage) GetFromClientId() string {
	if x != nil {
		return x.FromClientId
	}
	return ""
}

func (x *RedisMessage) GetFromLogic() string {
	if x != nil {
		return x.FromLogic
	}
	return ""
}

func (x *RedisMessage) GetMessageRaw() []byte {
	if x != nil {
		return x.MessageRaw
	}
	return nil
}

func (x *RedisMessage) GetMetadata() map[string][]byte {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *RedisMessage) GetTags() map[string][]byte {
	if x != nil {
		return x.Tags
	}
	return nil
}

var File_proto_redis_proto protoreflect.FileDescriptor

const file_proto_redis_proto_rawDesc = "" +
	"\n" +
	"\x11proto/redis.proto\x12\agobroke\"\xe3\x03\n" +
	"\fRedisMessage\x12\x1f\n" +
	"\vinstance_id\x18\x01 \x01(\tR\n" +
	"instanceId\x12!\n" +
	"\fmessage_uuid\x18\x02 \x01(\tR\vmessageUuid\x12\"\n" +
	"\rto_client_ids\x18\x03 \x03(\tR\vtoClientIds\x12\x19\n" +
	"\bto_logic\x18\x04 \x03(\tR\atoLogic\x12$\n" +
	"\x0efrom_client_id\x18\x05 \x01(\tR\ffromClientId\x12\x1d\n" +
	"\n" +
	"from_logic\x18\x06 \x01(\tR\tfromLogic\x12\x1f\n" +
	"\vmessage_raw\x18\a \x01(\fR\n" +
	"messageRaw\x12?\n" +
	"\bmetadata\x18\b \x03(\v2#.gobroke.RedisMessage.MetadataEntryR\bmetadata\x123\n" +
	"\x04tags\x18\t \x03(\v2\x1f.gobroke.RedisMessage.TagsEntryR\x04tags\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\fR\x05value:\x028\x01\x1a7\n" +
	"\tTagsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\fR\x05value:\x028\x01B!Z\x1fgithub.com/A13xB0/GoBroke/protob\x06proto3"

var (
	file_proto_redis_proto_rawDescOnce sync.Once
	file_proto_redis_proto_rawDescData []byte
)

func file_proto_redis_proto_rawDescGZIP() []byte {
	file_proto_redis_proto_rawDescOnce.Do(func() {
		file_proto_redis_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_redis_proto_rawDesc), len(file_proto_redis_proto_rawDesc)))
	})
	return file_proto_redis_proto_rawDescData
}

var file_proto_redis_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_proto_redis_proto_goTypes = []any{
	(*RedisMessage)(nil), // 0: gobroke.RedisMessage
	nil,                  // 1: gobroke.RedisMessage.MetadataEntry
	nil,                  // 2: gobroke.RedisMessage.TagsEntry
}
var file_proto_redis_proto_depIdxs = []int32{
	1, // 0: gobroke.RedisMessage.metadata:type_name -> gobroke.RedisMessage.MetadataEntry
	2, // 1: gobroke.RedisMessage.tags:type_name -> gobroke.RedisMessage.TagsEntry
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_proto_redis_proto_init() }
func file_proto_redis_proto_init() {
	if File_proto_redis_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_redis_proto_rawDesc), len(file_proto_redis_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_redis_proto_goTypes,
		DependencyIndexes: file_proto_redis_proto_depIdxs,
		MessageInfos:      file_proto_redis_proto_msgTypes,
	}.Build()
	File_proto_redis_proto = out.File
	file_proto_redis_proto_goTypes = nil
	file_proto_redis_proto_depIdxs = nil
}
